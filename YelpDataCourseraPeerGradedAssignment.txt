Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000
ii. Business table = 10,000
iii. Category table = 10,000
iv. Checkin table = 10,000
v. elite_years table = 10,000
vi. friend table = 10,000
vii. hours table = 10,000
viii. photo table = 10,000
ix. review table = 10,000 
x. tip table = 10,000
xi. user table =10,000

code : SELECT COUNT(*)
		FROM attribute
	


2. Find the total number of distinct records for the primary keys in each of the tables listed below:

	i. 	Business = id: 10000
	ii. 	Hours = business_id: 1562
	iii. 	Category = business_id: 2643
	iv. 	Attribute = business_id: 1115
	v. 	Review = id:10000, business_id: 8090, user_id: 9581
	vi. 	Checkin = business_id: 493
	vii. 	Photo = id: 10000, business_id: 6493
	viii. 	Tip = user_id: 537, business_id: 3979
	ix. 	User = id: 10000
	x. 	Friend = user_id: 11
	xi. 	Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.

code: SELECT COUNT(DISTINCT(user_id))
		FROM review	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer:
	SELECT COUNT(*)
		FROM user
		WHERE id IS NULL OR
		  name IS NULL OR
		  review_count IS NULL OR
		  yelping_since IS NULL OR
		  useful IS NULL OR
		  funny IS NULL OR
		  cool IS NULL OR
		  fans IS NULL OR
		  average_stars IS NULL OR
		  compliment_hot IS NULL OR
		  compliment_more IS NULL OR
		  compliment_profile IS NULL OR
		  compliment_cute IS NULL OR
		  compliment_list IS NULL OR
		  compliment_note IS NULL OR
		  compliment_plain IS NULL OR
		  compliment_cool IS NULL OR
		  compliment_funny IS NULL OR
		  compliment_writer IS NULL OR
		  compliment_photos IS NULL
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2,000	avg: 24.2995

code : SELECT MIN(stars), MAX(stars), AVG(stars)
		FROM review
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	select city, sum(review_count)
		from business
		group by city
		order by sum(review_count) desc
	
	Copy and Paste the Result Below:
	
+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon - 10 4.0 ratings

SQL code used to arrive at answer:
SELECT stars, count(review_count)
FROM business 
where city = 'Avon'
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+---------------------+
| stars | count(review_count) |
+-------+---------------------+
|   1.5 |                   1 |
|   2.5 |                   2 |
|   3.5 |                   3 |
|   4.0 |                   2 |
|   4.5 |                   1 |
|   5.0 |                   1 |
+-------+---------------------+

ii. Beachwood - 14 5.0 ratings

SELECT stars, count(review_count) as count
FROM business 
where city = 'Beachwood'
GROUP BY stars
order by stars desc


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   5.0 |     5 |
|   4.5 |     2 |
|   4.0 |     1 |
|   3.5 |     2 |
|   3.0 |     2 |
|   2.5 |     1 |
|   2.0 |     1 |
+-------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SELECT name, review_count
	FROM user
	order by review_count desc
	limit 3

		
	Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results: 

No.
According to the below data set, it's clear that number of review counts don't impact of number of fans.

+-----------+------+---------------+
| name      | fans | review_counts |
+-----------+------+---------------+
| Amy       |  519 |          1158 |
| Mimi      |  498 |          1010 |
| Harald    |  311 |          1161 |
| Gerald    |  256 |          2034 |
| Lisa      |  207 |          2021 |
| Nicole    |  200 |          2397 |
| Christine |  187 |          1309 |
| Mark      |  156 |          1945 |
| Jen       |  148 |          1744 |
| Linda     |  148 |          1233 |
+-----------+------+---------------+


code : 
	SELECT name, sum(fans) as fans, sum(review_count) as review_counts
	FROM user
	group by name
	order by fans desc
	limit 10

	

	
09. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More reviews with love
		Hate 232
		Love 1,780
	
	SQL code used to arrive at answer:
SELECT COUNT(*) FROM
  
	(SELECT *
  
	FROM review 
	WHERE text like '%hate%');

	
SELECT COUNT(*) FROM
  
	(SELECT *
  
	FROM review 
	WHERE text like '%love%');

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT u.name, u.id, u.fans
	FROM user u
	GROUP BY u.fans
	ORDER BY u.fans DESC
	
	Copy and Paste the Result Below:
+-----------+------------------------+------+
| name      | id                     | fans |
+-----------+------------------------+------+
| Amy       | -9I98YbNQnLdAmcYfb324Q |  503 |
| Mimi      | -8EnCioUmDygAbsYZmTeRQ |  497 |
| Harald    | --2vR0DIsmQ6WfcSzKWigw |  311 |
| Gerald    | -G7Zkl1wIWBBmD0KRy_sCw |  253 |
| Christine | -0IiMAZI2SsQ7VmyzJjokQ |  173 |
| Lisa      | -g3XIcCb2b-BD0QBCcq2Sw |  159 |
| Cat       | -9bbDysuiWeo2VShFJJtcw |  133 |
| William   | -FZBTkAZEXoP7CYvRV2ZwQ |  126 |
| Fran      | -9da1xk7zgnnfO1uTVYGkA |  124 |
| Lissa     | -lh59ko3dxChBSZ9U7LfUw |  120 |
+-----------+------------------------+------+
	
	



		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

No, distribution of hours doesn't impact on the attributes as it's not present in the table

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, review count is different as per the table.        
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

As a matter of fact, there is no similarity in address and neighborhood, hence I can't infer anything from the location.

SQL code used for analysis:

SELECT *
SELECT name, neighborhood, address, stars, review_count
FROM business 
WHERE CITY like 'Charlotte'
GROUP BY stars
ORDER BY stars DESC

RESULTS:

+----------------------------+--------------+---------------------------------+-------+--------------+
| name                       | neighborhood | address                         | stars | review_count |
+----------------------------+--------------+---------------------------------+-------+--------------+
| Kelly Tire Sales           | NoDa         | 2514 N Davidson St              |   5.0 |            5 |
| Zack's Hamburgers          |              | 4009 South Blvd                 |   4.5 |          120 |
| Tin Tin Box & Noodles      | Fourth Ward  | 101 N Tryon St                  |   4.0 |           63 |
| Jet's Pizza                | South Park   | 1607 Montford Dr                |   3.5 |           65 |
| Missha Beauty              |              | 3416 Wilkinson Blvd             |   3.0 |            4 |
| AD Fences and Decks        | Derita       | 5419 Haybridge Rd               |   2.5 |            3 |
| Rack Room Shoes            | Steele Creek | 12840 Walker Branch Dr, Ste 100 |   2.0 |            4 |
| Bank of America            | First Ward   | 100 N Tryon St, Ste 220         |   1.5 |           59 |
| BTR Construction & Roofing | Cotswold     | 4336 Monroe Rd                  |   1.0 |            6 |
+----------------------------+--------------+---------------------------------+-------+--------------+

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
Review count is low if it's not open and vice versa.         
         
ii. Difference 2:
Stars is much better in "not opening" state than "opening state"       
         
SQL code used for analysis:

SELECT is_open, stars, review_count
From business
GROUP BY is_open
ORDER BY stars DESC

+---------+-------+--------------+
| is_open | stars | review_count |
+---------+-------+--------------+
|       0 |   3.5 |           19 |
|       1 |   2.5 |           25 |
+---------+-------+--------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

I am looking forward to see on which day I might get the highest review or highest stars.     
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I joined 'Business' and 'hours' table to compare the attributes of the column based on hours. As a matter of fact, at first I had to truncate the day 
from the table, then inner join is proceeded to compare the weekday with stars and total_review.

Speaking of the outcome, Friday turns out to be the best day to get the most review.
Rest of the days are consequently Wendesday, Monday, Saturday, Thursday, Sunday, Tuesday
                  
iii. Output of your finished dataset:

+-----------+-------+--------------+
| Day       | stars | total_review |
+-----------+-------+--------------+
| Friday    | 428.0 |         5829 |
| Wednesday | 436.0 |         5798 |
| Monday    | 401.0 |         5627 |
| Saturday  | 385.5 |         5587 |
| Thursday  | 437.0 |         5148 |
| Sunday    | 296.0 |         4955 |
| Tuesday   | 431.5 |         4892 |
+-----------+-------+--------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT 

(Case
  when h.hours like 'Saturday%' then 'Saturday'
  when h.hours like 'Sunday%' then 'Sunday'
  when h.hours like 'Monday%' then 'Monday'
  when h.hours like 'Tuesday%' then 'Tuesday'
  when h.hours like 'Thurs%' then 'Thursday'
  when h.hours like 'Wednes%' then 'Wednesday'
  when h.hours like 'Fri%' then 'Friday'
  else 'None'
 end) as Day
 
 ,sum(b.stars) as stars
 ,sum(b.review_count) as total_review
 
FROM hours h
LEFT JOIN business b
ON b.id = h.business_id
GROUP BY day
order by total_review desc
